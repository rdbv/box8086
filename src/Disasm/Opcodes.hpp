#ifndef OPCODES_HPP
#define OPCODES_HPP

#include "../CPU/Defs.hpp"
#include <string>

#define GRP_NONE 0
#define GRP1     1
#define GRP2     2
#define GRP3a    0x3A
#define GRP3b    0x3B
#define GRP4     4
#define GRP5     5

#define UNKNOWN  -1

#define TO_REGISTER(x) ( x & 2 )
#define IS_WORD(x)     ( x & 1 )

enum Operand {
          
    /* Immediates */
    IMM_IB, IMM_IV,                 
    IMM_ONE, 
    
    /* Regs */
    REG_AL,REG_CL,
    REG_DL,REG_BL,
    REG_AH,REG_CH,
    REG_DH,REG_BH,
    REG_AX,REG_CX,
    REG_DX,REG_BX,
    REG_SP,REG_BP,
    REG_SI,REG_DI,
    REG_CS,REG_DS,
    REG_SS,REG_ES,                          
    
    /* None */
    NONE

};

enum EncodeType{

    IMM_ENC,
    JMP_ENC,
    GRP_ENC,
    MODRM_ENC,               
    REG_REG_ENC,           
    REG_IMM_ENC,           
    INVALID_ENC,            
    ONE_BYTE_ENC,          
    MODRM_MEM_ENC,         
    MODRM_SEG_ENC,         
    MODRM_IMM_ENC,         
    MODRM_ARG_ONE,         
    MODRM_ONE_ARG,         
    AXAL_SEG_OFF_ENC,      
    RAW_SEG_RAW_OFF_ENC,     

};

struct Opcode {
    std::string instr;
    Operand lhs, rhs;
    EncodeType enc;
    int group, fullSize;
};

static Opcode opcodes[256] = {
    Opcode{"ADD", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN},
    Opcode{"ADD", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN},
    Opcode{"ADD", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN},
    Opcode{"ADD", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN},
    Opcode{"ADD", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"ADD", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"PUSH ES", REG_ES, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP ES", REG_ES, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"OR",  NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"OR",  NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"OR",  NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"OR",  NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"OR",  REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"OR",  REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"PUSH",  REG_CS, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,             
    Opcode{"ADC", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"ADC", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"ADC", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"ADC", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"ADC", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"ADC", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"PUSH SS", REG_SS, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP SS", REG_SS, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"SBB", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"SBB", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"SBB", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"SBB", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"SBB", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"SBB", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"PUSH DS", REG_DS, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP DS", REG_DS, NONE,  ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"AND", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"AND", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"AND", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"AND", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"AND", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"AND", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"ES:", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"DAA", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"SUB", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"SUB", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"SUB", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"SUB", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"SUB", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"SUB", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"CS:", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"DAS", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,   
    Opcode{"XOR", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"XOR", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"XOR", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"XOR", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"XOR", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"XOR", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"SS:", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"AAA", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"CMP", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"CMP", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"CMP", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"CMP", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"CMP", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"CMP", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"DS:", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"AAS",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INC AX",  REG_AX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INC CX", REG_CX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INC DX", REG_DX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INC BX", REG_BX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INC SP", REG_SP, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INC BP", REG_BP, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INC SI", REG_SI, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INC DI", REG_DI, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"DEC AX", REG_AX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"DEC CX", REG_CX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"DEC DX", REG_DX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"DEC BX", REG_BX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"DEC SP", REG_SP, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"DEC BP", REG_BP, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"DEC SI", REG_SI, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"DEC DI", REG_DI, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSH AX", REG_AX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSH CX", REG_CX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSH DX", REG_DX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSH BX", REG_BX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSH SP", REG_SP, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSH BP", REG_BP, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSH SI", REG_SI, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSH DI", REG_DI, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP AX", REG_AX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP CX", REG_CX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP DX", REG_DX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP BX", REG_BX, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP SP", REG_SP, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP BP", REG_BP, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP SI", REG_SI, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POP DI", REG_DI, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"JO",  IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JNO", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JB",  IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JNB", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JZ",  IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JNZ", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JBE", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JA",  IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JS",  IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JNS", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JPE", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JPO", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JL",  IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JGE", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JLE", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JG",  IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"GRP1", NONE, IMM_IB, GRP_ENC, GRP1, UNKNOWN} ,
    Opcode{"GRP1", NONE, IMM_IV, GRP_ENC, GRP1, UNKNOWN} ,
    Opcode{"GRP1", NONE, NONE, GRP_ENC, GRP1, UNKNOWN} ,
    Opcode{"GRP1", NONE, IMM_IB, GRP_ENC, GRP1, UNKNOWN} ,
    Opcode{"TEST", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"TEST", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"XCHG",  NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"XCHG",  NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"MOV", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"MOV", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"MOV", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"MOV", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"MOV", NONE, NONE, MODRM_SEG_ENC, GRP_NONE, UNKNOWN} ,              
    Opcode{"LEA", NONE, NONE, MODRM_MEM_ENC, GRP_NONE, UNKNOWN} ,              
    Opcode{"MOV", NONE, NONE, MODRM_SEG_ENC, GRP_NONE, UNKNOWN} ,             
    Opcode{"POP", NONE, NONE, MODRM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"NOP", NONE, NONE, ONE_BYTE_ENC, ONE_BYTE_ENC, 1} ,
    Opcode{"XCHG CX, AX", REG_CX, REG_AX, REG_REG_ENC, GRP_NONE, 1} ,
    Opcode{"XCHG DX, AX", REG_DX, REG_AX, REG_REG_ENC, GRP_NONE, 1} ,
    Opcode{"XCHG BX, AX", REG_BX, REG_AX, REG_REG_ENC, GRP_NONE, 1} ,
    Opcode{"XCHG SP, AX", REG_SP, REG_AX, REG_REG_ENC, GRP_NONE, 1} ,
    Opcode{"XCHG BP, AX", REG_BP, REG_AX, REG_REG_ENC, GRP_NONE, 1} ,
    Opcode{"XCHG SI, AX", REG_SI, REG_AX, REG_REG_ENC, GRP_NONE, 1} ,
    Opcode{"XCHG DI, AX", REG_DI, REG_AX, REG_REG_ENC, GRP_NONE, 1} ,
    Opcode{"CBW", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"CWD", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"CALL",  NONE, NONE, RAW_SEG_RAW_OFF_ENC, GRP_NONE, 5} ,           
    Opcode{"WAIT",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"PUSHF", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"POPF",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"SAHF",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"LAHF",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"MOV", REG_AL, NONE, AXAL_SEG_OFF_ENC, GRP_NONE, 3} ,           
    Opcode{"MOV", REG_AX, NONE, AXAL_SEG_OFF_ENC, GRP_NONE, 3} ,           
    Opcode{"MOV", NONE, REG_AL, AXAL_SEG_OFF_ENC, GRP_NONE, 3} ,           
    Opcode{"MOV", NONE, REG_AX, AXAL_SEG_OFF_ENC, GRP_NONE, 3} ,
    Opcode{"MOVSB",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"MOVSW",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"CMPSB",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"CMPSW",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"TEST", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"TEST", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"STOSB", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"STOSW", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"LODSB", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"LODSW", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"SCASB", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"SCASW", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"MOV", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"MOV", REG_CL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"MOV", REG_DL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"MOV", REG_BL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"MOV", REG_AH, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"MOV", REG_CH, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"MOV", REG_DH, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"MOV", REG_BH, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"MOV", REG_AX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"MOV", REG_CX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"MOV", REG_DX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"MOV", REG_BX, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"MOV", REG_SP, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"MOV", REG_BP, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"MOV", REG_SI, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"MOV", REG_DI, IMM_IV, REG_IMM_ENC, GRP_NONE, 3} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"RET", IMM_IV, NONE, IMM_ENC, IMM_ENC, 3} ,
    Opcode{"RET", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"LES", NONE, NONE, MODRM_MEM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"LDS", NONE, NONE, MODRM_MEM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"MOV", NONE, NONE, MODRM_IMM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"MOV", NONE, NONE, MODRM_IMM_ENC, GRP_NONE, UNKNOWN} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"RETF",  IMM_IV, NONE, IMM_ENC, GRP_NONE, 3} ,
    Opcode{"RETF",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INT3",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INT", IMM_IB, NONE, IMM_ENC, GRP_NONE, 2} ,
    Opcode{"INTO",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"IRET",  NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"GRP2", NONE, IMM_ONE, GRP_ENC, GRP2, UNKNOWN} ,
    Opcode{"GRP2", NONE, IMM_ONE, GRP_ENC, GRP2, UNKNOWN} ,
    Opcode{"GRP2", NONE, REG_CL, GRP_ENC, GRP2, UNKNOWN} ,
    Opcode{"GRP2", NONE, REG_CL, GRP_ENC, GRP2, UNKNOWN} ,
    Opcode{"AAM", IMM_IB, NONE, IMM_ENC, GRP_NONE, 2} ,
    Opcode{"AAD", IMM_IB, NONE, IMM_ENC, GRP_NONE, 2} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"XLAT", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID",  NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID",  NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID",  NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID",  NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"INVALID",  NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,
    Opcode{"LOOPNZ", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"LOOPZ", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"LOOP", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"JCXZ", IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,
    Opcode{"IN", REG_AL, IMM_IB, REG_IMM_ENC, GRP_NONE, 2} ,
    Opcode{"IN", REG_AX, IMM_IB, REG_IMM_ENC, GRP_NONE, 2},
    Opcode{"OUT", IMM_IB, REG_AL, IMM_ENC, GRP_NONE, 2} ,
    Opcode{"OUT", IMM_IB, REG_AX, IMM_ENC, GRP_NONE, 2} ,
    Opcode{"CALL", IMM_IV, NONE, JMP_ENC, GRP_NONE, 3} ,
    Opcode{"JMP",  IMM_IV, NONE, JMP_ENC, GRP_NONE, 3} ,
    Opcode{"JMP",  NONE, NONE, RAW_SEG_RAW_OFF_ENC, GRP_NONE, 5} ,       
    Opcode{"JMP",  IMM_IB, NONE, JMP_ENC, GRP_NONE, 2} ,               
    Opcode{"IN",  REG_AL, REG_DX, ONE_BYTE_ENC, GRP_NONE, 1} ,          
    Opcode{"IN",  REG_AX, REG_DX, ONE_BYTE_ENC, GRP_NONE, 1} ,          
    Opcode{"OUT",  REG_DX, REG_AL, ONE_BYTE_ENC, GRP_NONE, 1} ,       
    Opcode{"OUT", REG_DX, REG_AX, ONE_BYTE_ENC, GRP_NONE, 1} ,  
    Opcode{"LOCK", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,         
    Opcode{"INVALID", NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,  
    Opcode{"REPNZ ",  NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,       
    Opcode{"REPZ ",  NONE, NONE, INVALID_ENC, GRP_NONE, 1} ,         
    Opcode{"HLT", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,            
    Opcode{"CMC", NONE, NONE, ONE_BYTE_ENC, GRP_NONE, 1} ,            
    Opcode{"GRP3a", NONE, NONE, GRP_ENC, GRP3a, UNKNOWN} ,                   
    Opcode{"GRP3b", NONE, NONE, GRP_ENC, GRP3b, UNKNOWN} ,                   
    Opcode{"CLC", NONE, NONE, ONE_BYTE_ENC, GRP_NONE,  1} ,            
    Opcode{"STC", NONE, NONE, ONE_BYTE_ENC, GRP_NONE,  1} ,            
    Opcode{"CLI", NONE, NONE, ONE_BYTE_ENC, GRP_NONE,  1} ,            
    Opcode{"STI", NONE, NONE, ONE_BYTE_ENC, GRP_NONE,  1} ,            
    Opcode{"CLD", NONE, NONE, ONE_BYTE_ENC, GRP_NONE,  1} ,            
    Opcode{"STD", NONE, NONE, ONE_BYTE_ENC, GRP_NONE,  1} ,            
    Opcode{"GRP4", NONE, NONE, GRP_ENC, GRP4, UNKNOWN} ,                     
    Opcode{"GRP5", NONE, NONE, GRP_ENC, GRP5, UNKNOWN} ,       
};

static std::unordered_map<ubyte, std::unordered_map<ubyte, Opcode>> grp {
    {
        GRP1,
            {
                {0b000, Opcode{"ADD", NONE, NONE, MODRM_IMM_ENC}},
                {0b001, Opcode{"OR", NONE, NONE, MODRM_IMM_ENC}},
            }
    },
};

#endif
